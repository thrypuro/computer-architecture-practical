#*****************************************************************************************
# Vivado (TM) v2018.3 (64-bit)
#
# recreate.tcl: Tcl script for re-creating project 'RVcore1'
#
# Generated by Vivado on Sun Aug 11 11:39:32 +0100 2019
# IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (recreate.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    "c:/Users/nigel/Documents/svn_roots/computerdesign/CARD_Practicals_2019/Practical_3/proj/RVcore1.srcs/sources_1/ip/rv32im_rm_0/rv32im_rm_0.xci"
#
# 3. The following remote source files that were added to the original project:-
#
#    "C:/Users/nigel/Documents/svn_roots/computerdesign/CARD_Practicals_2019/Practical_3/src/ip/rv32im_alu_0/rv32im_alu_0.xci"
#    "C:/Users/nigel/Documents/svn_roots/computerdesign/CARD_Practicals_2019/Practical_3/src/ip/clock_generator.xci"
#    "C:/Users/nigel/Documents/svn_roots/computerdesign/CARD_Practicals_2019/Practical_3/src/inc/params.v"
#    "C:/Users/nigel/Documents/svn_roots/computerdesign/CARD_Practicals_2019/Practical_3/src/hdl/branch_cache.v"
#    "C:/Users/nigel/Documents/svn_roots/computerdesign/CARD_Practicals_2019/Practical_3/src/hdl/branch_predictor.v"
#    "C:/Users/nigel/Documents/svn_roots/computerdesign/CARD_Practicals_2019/Practical_3/src/hdl/bypass_or_stall.v"
#    "C:/Users/nigel/Documents/svn_roots/computerdesign/CARD_Practicals_2019/Practical_3/src/hdl/cpu.v"
#    "C:/Users/nigel/Documents/svn_roots/computerdesign/CARD_Practicals_2019/Practical_3/src/hdl/csr_unit.v"
#    "C:/Users/nigel/Documents/svn_roots/computerdesign/CARD_Practicals_2019/Practical_3/src/hdl/dccm_ram.v"
#    "C:/Users/nigel/Documents/svn_roots/computerdesign/CARD_Practicals_2019/Practical_3/src/hdl/decoder.v"
#    "C:/Users/nigel/Documents/svn_roots/computerdesign/CARD_Practicals_2019/Practical_3/src/hdl/divider.v"
#    "C:/Users/nigel/Documents/svn_roots/computerdesign/CARD_Practicals_2019/Practical_3/src/hdl/exec_unit.v"
#    "C:/Users/nigel/Documents/svn_roots/computerdesign/CARD_Practicals_2019/Practical_3/src/hdl/fetch_unit.v"
#    "C:/Users/nigel/Documents/svn_roots/computerdesign/CARD_Practicals_2019/Practical_3/src/hdl/frame_buffer.v"
#    "C:/Users/nigel/Documents/svn_roots/computerdesign/CARD_Practicals_2019/Practical_3/src/hdl/predictor_state.v"
#    "C:/Users/nigel/Documents/svn_roots/computerdesign/CARD_Practicals_2019/Practical_3/src/hdl/ras.v"
#    "C:/Users/nigel/Documents/svn_roots/computerdesign/CARD_Practicals_2019/Practical_3/src/hdl/regfile.v"
#    "C:/Users/nigel/Documents/svn_roots/computerdesign/CARD_Practicals_2019/Practical_3/src/hdl/resync.v"
#    "C:/Users/nigel/Documents/svn_roots/computerdesign/CARD_Practicals_2019/Practical_3/src/hdl/ssd_driver.v"
#    "C:/Users/nigel/Documents/svn_roots/computerdesign/CARD_Practicals_2019/Practical_3/src/hdl/store_queue.v"
#    "C:/Users/nigel/Documents/svn_roots/computerdesign/CARD_Practicals_2019/Practical_3/src/hdl/vga_control.v"
#    "C:/Users/nigel/Documents/svn_roots/computerdesign/CARD_Practicals_2019/Practical_3/src/hdl/vga_display.v"
#    "C:/Users/nigel/Documents/svn_roots/computerdesign/CARD_Practicals_2019/Practical_3/src/hdl/top.v"
#    "C:/Users/nigel/Documents/svn_roots/computerdesign/CARD_Practicals_2019/Practical_3/src/others/deps_test.hex.txt"
#    "C:/Users/nigel/Documents/svn_roots/computerdesign/CARD_Practicals_2019/Practical_3/src/others/iccm_code.hex.txt"
#    "C:/Users/nigel/Documents/svn_roots/computerdesign/CARD_Practicals_2019/Practical_3/src/others/iccm_code.hex.hex"
#    "C:/Users/nigel/Documents/svn_roots/computerdesign/CARD_Practicals_2019/Practical_3/src/others/mbrot.hex"
#    "C:/Users/nigel/Documents/svn_roots/computerdesign/CARD_Practicals_2019/Practical_3/src/constraints/top.xdc"
#    "C:/Users/nigel/Documents/svn_roots/computerdesign/CARD_Practicals_2019/Practical_3/src/constraints/timing.xdc"
#    "C:/Users/nigel/Documents/svn_roots/computerdesign/CARD_Practicals_2019/Practical_3/src/sim/tb.v"
#    "C:/Users/nigel/Documents/svn_roots/computerdesign/CARD_Practicals_2019/Practical_3/src/sim/tb_waves.wcfg"
#
#*****************************************************************************************

# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "./"

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "RVcore1"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "recreate.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-origin_dir_override\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/proj"]"

# Create project
create_project ${_xil_proj_name_} ./${_xil_proj_name_} -part xc7z010clg400-3

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Set project properties
set obj [current_project]
set_property -name "board_part" -value "digilentinc.com:zybo-z7-10:part0:1.0" -objects $obj
set_property -name "board_part_repo_paths" -value "$origin_dir/repo/board_files" -objects $obj
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "dsa.accelerator_binary_content" -value "bitstream" -objects $obj
set_property -name "dsa.accelerator_binary_format" -value "xclbin2" -objects $obj
set_property -name "dsa.board_id" -value "zybo-z7-10" -objects $obj
set_property -name "dsa.description" -value "Vivado generated DSA" -objects $obj
set_property -name "dsa.dr_bd_base_address" -value "0" -objects $obj
set_property -name "dsa.emu_dir" -value "emu" -objects $obj
set_property -name "dsa.flash_interface_type" -value "bpix16" -objects $obj
set_property -name "dsa.flash_offset_address" -value "0" -objects $obj
set_property -name "dsa.flash_size" -value "1024" -objects $obj
set_property -name "dsa.host_architecture" -value "x86_64" -objects $obj
set_property -name "dsa.host_interface" -value "pcie" -objects $obj
set_property -name "dsa.num_compute_units" -value "60" -objects $obj
set_property -name "dsa.platform_state" -value "pre_synth" -objects $obj
set_property -name "dsa.vendor" -value "xilinx" -objects $obj
set_property -name "dsa.version" -value "0.0" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/${_xil_proj_name_}.cache/ip" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "sim.central_dir" -value "$proj_dir/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj
set_property -name "webtalk.activehdl_export_sim" -value "2" -objects $obj
set_property -name "webtalk.ies_export_sim" -value "2" -objects $obj
set_property -name "webtalk.modelsim_export_sim" -value "2" -objects $obj
set_property -name "webtalk.questa_export_sim" -value "2" -objects $obj
set_property -name "webtalk.riviera_export_sim" -value "2" -objects $obj
set_property -name "webtalk.vcs_export_sim" -value "2" -objects $obj
set_property -name "webtalk.xcelium_export_sim" -value "2" -objects $obj
set_property -name "webtalk.xsim_export_sim" -value "2" -objects $obj
set_property -name "xpm_libraries" -value "XPM_CDC" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set IP repository paths
set obj [get_filesets sources_1]
set_property "ip_repo_paths" "[file normalize "$origin_dir/repo"]" $obj

# Rebuild user ip_repo's index before adding any source files
update_ip_catalog -rebuild

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/src/ip/rv32im_alu_0/rv32im_alu_0.xci"] \
 [file normalize "${origin_dir}/src/ip/clock_generator.xci"] \
 [file normalize "${origin_dir}/src/inc/params.v"] \
 [file normalize "${origin_dir}/src/hdl/branch_cache.v"] \
 [file normalize "${origin_dir}/src/hdl/branch_predictor.v"] \
 [file normalize "${origin_dir}/src/hdl/bypass_or_stall.v"] \
 [file normalize "${origin_dir}/src/hdl/cpu.v"] \
 [file normalize "${origin_dir}/src/hdl/csr_unit.v"] \
 [file normalize "${origin_dir}/src/hdl/dccm_ram.v"] \
 [file normalize "${origin_dir}/src/hdl/decoder.v"] \
 [file normalize "${origin_dir}/src/hdl/divider.v"] \
 [file normalize "${origin_dir}/src/hdl/exec_unit.v"] \
 [file normalize "${origin_dir}/src/hdl/fetch_unit.v"] \
 [file normalize "${origin_dir}/src/hdl/frame_buffer.v"] \
 [file normalize "${origin_dir}/src/hdl/predictor_state.v"] \
 [file normalize "${origin_dir}/src/hdl/ras.v"] \
 [file normalize "${origin_dir}/src/hdl/regfile.v"] \
 [file normalize "${origin_dir}/src/hdl/resync.v"] \
 [file normalize "${origin_dir}/src/hdl/ssd_driver.v"] \
 [file normalize "${origin_dir}/src/hdl/store_queue.v"] \
 [file normalize "${origin_dir}/src/hdl/vga_control.v"] \
 [file normalize "${origin_dir}/src/hdl/vga_display.v"] \
 [file normalize "${origin_dir}/src/hdl/top.v"] \
 [file normalize "${origin_dir}/src/others/deps_test.hex.txt"] \
 [file normalize "${origin_dir}/src/others/iccm_code.hex.txt"] \
 [file normalize "${origin_dir}/src/others/iccm_code.hex.hex"] \
 [file normalize "${origin_dir}/src/others/mbrot.hex"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/src/ip/rv32im_alu_0/rv32im_alu_0.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}

set file "$origin_dir/src/ip/clock_generator.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}

set file "$origin_dir/src/inc/params.v"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "Verilog Header" -objects $file_obj

set file "$origin_dir/src/others/deps_test.hex.txt"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "Memory Initialization Files" -objects $file_obj

set file "$origin_dir/src/others/iccm_code.hex.txt"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "Memory Initialization Files" -objects $file_obj

set file "$origin_dir/src/others/iccm_code.hex.hex"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "Memory Initialization Files" -objects $file_obj

set file "$origin_dir/src/others/mbrot.hex"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "Memory Initialization Files" -objects $file_obj


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "top" -value "top" -objects $obj

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/proj/RVcore1.srcs/sources_1/ip/rv32im_rm_0/rv32im_rm_0.xci" ]\
]
set imported_files [import_files -fileset sources_1 $files]

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
set file "rv32im_rm_0/rv32im_rm_0.xci"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/src/constraints/top.xdc"]"
set file_added [add_files -norecurse -fileset $obj [list $file]]
set file "$origin_dir/src/constraints/top.xdc"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/src/constraints/timing.xdc"]"
set file_added [add_files -norecurse -fileset $obj [list $file]]
set file "$origin_dir/src/constraints/timing.xdc"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
set files [list \
 [file normalize "${origin_dir}/src/sim/tb.v"] \
 [file normalize "${origin_dir}/src/sim/tb_waves.wcfg"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sim_1' fileset file properties for remote files
# None

# Set 'sim_1' fileset file properties for local files
# None

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "top" -value "tb" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj
set_property -name "xsim.simulate.runtime" -value "100us" -objects $obj

# Set 'utils_1' fileset object
set obj [get_filesets utils_1]
# Empty (no sources present)

# Set 'utils_1' fileset properties
set obj [get_filesets utils_1]

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
    create_run -name synth_1 -part xc7z010clg400-3 -flow {Vivado Synthesis 2015} -strategy "Vivado Synthesis Defaults" -report_strategy {No Reports} -constrset constrs_1
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2015" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj
set_property -name "steps.synth_design.args.flatten_hierarchy" -value "none" -objects $obj
set_property -name "steps.synth_design.args.directive" -value "RuntimeOptimized" -objects $obj
set_property -name "steps.synth_design.args.fsm_extraction" -value "off" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
    create_run -name impl_1 -part xc7z010clg400-3 -flow {Vivado Implementation 2015} -strategy "Vivado Implementation Defaults" -report_strategy {No Reports} -constrset constrs_1 -parent_run synth_1
} else {
  set_property strategy "Vivado Implementation Defaults" [get_runs impl_1]
  set_property flow "Vivado Implementation 2015" [get_runs impl_1]
}
set obj [get_runs impl_1]
set_property -name "strategy" -value "Vivado Implementation Defaults" -objects $obj
set_property -name "steps.opt_design.args.directive" -value "RuntimeOptimized" -objects $obj
set_property -name "steps.place_design.args.directive" -value "RuntimeOptimized" -objects $obj
set_property -name "steps.route_design.args.directive" -value "RuntimeOptimized" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# set the current impl run
current_run -implementation [get_runs impl_1]

puts "INFO: Project created:${_xil_proj_name_}"
set obj [get_dashboards default_dashboard]

# Create 'drc_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "drc_1" ] ] ""]} {
create_dashboard_gadget -name {drc_1} -type drc
}
set obj [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "drc_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_drc_0" -objects $obj

# Create 'methodology_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "methodology_1" ] ] ""]} {
create_dashboard_gadget -name {methodology_1} -type methodology
}
set obj [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "methodology_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_methodology_0" -objects $obj

# Create 'power_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "power_1" ] ] ""]} {
create_dashboard_gadget -name {power_1} -type power
}
set obj [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "power_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_power_0" -objects $obj

# Create 'timing_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "timing_1" ] ] ""]} {
create_dashboard_gadget -name {timing_1} -type timing
}
set obj [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "timing_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_timing_summary_0" -objects $obj

# Create 'utilization_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "utilization_1" ] ] ""]} {
create_dashboard_gadget -name {utilization_1} -type utilization
}
set obj [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "utilization_1" ] ]
set_property -name "reports" -value "synth_1#synth_1_synth_report_utilization_0" -objects $obj
set_property -name "run.step" -value "synth_design" -objects $obj
set_property -name "run.type" -value "synthesis" -objects $obj

# Create 'utilization_2' gadget (if not found)
if {[string equal [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "utilization_2" ] ] ""]} {
create_dashboard_gadget -name {utilization_2} -type utilization
}
set obj [get_dashboard_gadgets -of_objects [get_dashboards default_dashboard] [ list "utilization_2" ] ]
set_property -name "reports" -value "impl_1#impl_1_place_report_utilization_0" -objects $obj

move_dashboard_gadget -name {utilization_1} -row 0 -col 0
move_dashboard_gadget -name {power_1} -row 1 -col 0
move_dashboard_gadget -name {drc_1} -row 2 -col 0
move_dashboard_gadget -name {timing_1} -row 0 -col 1
move_dashboard_gadget -name {utilization_2} -row 1 -col 1
move_dashboard_gadget -name {methodology_1} -row 2 -col 1
# Set current dashboard to 'default_dashboard' 
current_dashboard default_dashboard 
